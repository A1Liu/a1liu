#!/bin/bash

# Vim Commands
alias :q!=exit
alias :q=exit
alias :ex=vim
alias vi=vim
alias di='VIM_DEBUG=1 vim'
alias zigb='zig build -p .zig/zig-out --cache-dir .zig/zig-cache'

alias rmbranch="git for-each-ref --format='%(refname)' 'refs/heads/' | sed 's|refs/heads/||' | grep -v 'main\\|master' | xargs git branch -D"


# SSH
alias ssh='TERM=xterm-256color ssh'

# Tmux
function aliu() {
    if tmux attach -d -t "aliu"; then
        return 0
    fi

    tmux new -s "aliu" -c "$HOME/code"
}

function work() {
    if tmux attach -d -t "work$1"; then
        return 0
    fi

    tmux new-session -d -s "work$1" -c "$HOME/code/bedrock$1/webapp/wanda"

    tmux split-window -h -c "$HOME/code/bedrock$1/webapp/wanda"

    tmux new-window -c "$HOME/code/bedrock$1/bedrock"
    tmux split-window -h -c "$HOME/code/bedrock$1/bedrock/cerebro/web/apollo"

    tmux attach -d -t "work$1"
}

# Disable <C-s> behavior
stty -ixon

alias gs="ls && echo && git s"

# The open command
if command -v 'xdg-open' >/dev/null 2>&1 ; then
    alias open=xdg-open
fi

# tree and ls using exa instead
# alias tree='exa -T'
# alias ls=exa


# Git
alias groot='cd "$(git root)"'

. "${SHELL_DIR}/common/git-completions"

# https://stackoverflow.com/questions/6759791/how-do-i-move-forward-and-backward-between-commits-in-git
function git_gofwd() {
    git checkout $(git rev-list --topo-order HEAD.."$*" | tail -1)
}

# PYTHON
alias python="python3"
alias pip="pip3"

# RUBY
alias ruby_setup='eval "$(rbenv init -)" ; alias ruby_setup=true'
alias gem='ruby_setup && unalias gem && gem'
alias bundle='ruby_setup && unalias bundle && bundle'
alias jekyll='ruby_setup && unalias jekyll && jekyll'

# export A1LIU_NVM_LOADED=0

# a1liu_load_nvm () {
#     if [ $A1LIU_NVM_LOADED -eq 0 ]; then
#         A1LIU_NVM_LOADED=1
#         # The NVM setup script creates a shell function, and having the alias
#         # around interferes with that function. We destroy the alias here to
#         # prevent any craziness.
#         #                           - Albert Liu, Feb 01, 2022 Tue 02:19 EST
#         unalias nvm
# 
#         export NVM_DIR="$HOME/.nvm"
#         export PATH="$PATH:$NVM_DIR"
# 
#         NVM_SCRIPT="/usr/local/opt/nvm/nvm.sh"
#         NVM_COMPLETIONS="/usr/local/opt/nvm/etc/bash_completion.d/nvm"
# 
#         [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
#         [ -s "$NVM_SCRIPT" ] && . "$NVM_SCRIPT"
#         [ -s "$NVM_COMPLETIONS" ] && . "$NVM_COMPLETIONS"
# 
#         # This is kept in the condition to prevent auto-overriding explicit
#         # calls to nvm use X
#         nvm use || true
#     fi
# }

# TODO: Put these in `.zshenv` instead of here
# The unalias happens above, so it's unnecessary here.
#                       - Albert Liu, Feb 01, 2022 Tue 02:20 EST
# alias nvm='a1liu_load_nvm && nvm'

# alias node='unalias node && a1liu_load_nvm && node'
# alias npm='unalias npm && a1liu_load_nvm && npm'
# alias yarn='unalias yarn && a1liu_load_nvm && yarn'
# alias prettier='unalias prettier && a1liu_load_nvm && prettier'
# alias npx='unalias npx && a1liu_load_nvm && npx'

function karimify() {
    if ! test -e "$HOME/.karim-dotfiles"; then
        git clone https://github.com/karimsa/dotfiles ~/.karim-dotfiles
    fi
    source ~/.karim-dotfiles/.rc
}

# if command -v cached-nix-shell >/dev/null 2>&1; then
#   alias nix-shell='cached-nix-shell'
# fi

function alenv() {
    local shell_nix_path

    if [ -n "$1" ]; then
      if [ -f "$1" ]; then
        shell_nix_path="$1"
      elif [ -f "$CFG_DIR/shell/nix/$1.nix" ]; then
        shell_nix_path="$CFG_DIR/shell/nix/$1.nix"
      else
        echo "'$1' doesn't exist!"
        return 1
      fi
    elif [ -f "shell.aliu-local.nix" ]; then
      shell_nix_path="shell.aliu-local.nix"
    elif [ -f ".shell.aliu-local.nix" ]; then
      shell_nix_path=".shell.aliu-local.nix"
    elif [ -f "shell.nix" ]; then
      shell_nix_path="shell.nix"
    elif [ -f "default.nix" ]; then
      shell_nix_path="default.nix"
    else
      echo "Didn't provide an argument, and couldn't find shell.aliu-local.nix/shell.nix/default.nix"
      return 1
    fi

    nix-shell "$shell_nix_path" --command 'zsh'
}
